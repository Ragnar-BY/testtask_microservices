// Code generated by mockery v1.0.0. DO NOT EDIT.
package manager

import context "context"
import mock "github.com/stretchr/testify/mock"
import player "github.com/Ragnar-BY/testtask_microservices/player"

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

// AddPlayer provides a mock function with given fields: ctx, name
func (_m *MockDB) AddPlayer(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlayer provides a mock function with given fields: ctx, id
func (_m *MockDB) DeletePlayer(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PlayerByID provides a mock function with given fields: ctx, id
func (_m *MockDB) PlayerByID(ctx context.Context, id int) (*player.Player, error) {
	ret := _m.Called(ctx, id)

	var r0 *player.Player
	if rf, ok := ret.Get(0).(func(context.Context, int) *player.Player); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*player.Player)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlayer provides a mock function with given fields: ctx, id, _a2
func (_m *MockDB) UpdatePlayer(ctx context.Context, id int, _a2 player.Player) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, player.Player) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
