// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import proto "github.com/Ragnar-BY/testtask_microservices/proto"

// PlayerServiceClient is an autogenerated mock type for the PlayerServiceClient type
type PlayerServiceClient struct {
	mock.Mock
}

// CreateNewPlayer provides a mock function with given fields: ctx, in, opts
func (_m *PlayerServiceClient) CreateNewPlayer(ctx context.Context, in *proto.CreatePlayerRequest, opts ...grpc.CallOption) (*proto.CreatePlayerReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.CreatePlayerReply
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreatePlayerRequest, ...grpc.CallOption) *proto.CreatePlayerReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreatePlayerReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreatePlayerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FundPointsToPlayer provides a mock function with given fields: ctx, in, opts
func (_m *PlayerServiceClient) FundPointsToPlayer(ctx context.Context, in *proto.PlayerIDPointRequest, opts ...grpc.CallOption) (*proto.PlayerBalanceReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.PlayerBalanceReply
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PlayerIDPointRequest, ...grpc.CallOption) *proto.PlayerBalanceReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PlayerBalanceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.PlayerIDPointRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlayerPoints provides a mock function with given fields: ctx, in, opts
func (_m *PlayerServiceClient) GetPlayerPoints(ctx context.Context, in *proto.PlayerIDRequest, opts ...grpc.CallOption) (*proto.PlayerBalanceReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.PlayerBalanceReply
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PlayerIDRequest, ...grpc.CallOption) *proto.PlayerBalanceReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PlayerBalanceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.PlayerIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePlayer provides a mock function with given fields: ctx, in, opts
func (_m *PlayerServiceClient) RemovePlayer(ctx context.Context, in *proto.PlayerIDRequest, opts ...grpc.CallOption) (*proto.Nothing, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.Nothing
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PlayerIDRequest, ...grpc.CallOption) *proto.Nothing); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Nothing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.PlayerIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TakePointsFromPlayer provides a mock function with given fields: ctx, in, opts
func (_m *PlayerServiceClient) TakePointsFromPlayer(ctx context.Context, in *proto.PlayerIDPointRequest, opts ...grpc.CallOption) (*proto.PlayerBalanceReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *proto.PlayerBalanceReply
	if rf, ok := ret.Get(0).(func(context.Context, *proto.PlayerIDPointRequest, ...grpc.CallOption) *proto.PlayerBalanceReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PlayerBalanceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.PlayerIDPointRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
